import { Menu } from '@grammyjs/menu'
import { Ctx } from '.'
import { BotContext } from '..'
import { goLike } from '../../../../pkg/function_exec'
import { OrderStatus } from '../../../domain'
import { Routes } from '../routes'

export const mainMenu = new Menu<BotContext>('main')
  .text(`–û–±—Ä–∞—Ç–∏ —Å—Ç—ñ–∫–µ—Ä–∏`, selectStickersButton)
  .row()
  .text(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞`, referralProgramButton)
  .row()
  .submenu(`–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è`, 'stickers-and-orders')
  .text(`FAQ`, faqButton)
  .row()

const stickersAndOrdersSubenu = new Menu<BotContext>('stickers-and-orders')
  .text('–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', myOrdersButton)
  .text('–ú–æ—ó –Ω–∞–ª—ñ–ø–∫–∏', myStickerSetsButton)
  .row()
  .back('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
  .row()

mainMenu.register(stickersAndOrdersSubenu)

/** Changes route to Select Stickers, asks user to send stickers and shows pricing. */
async function selectStickersButton(ctx: Ctx) {
  let logger = ctx.logger.child({ name: 'main-menu: Select stickers', user_id: ctx.from.id })

  // change route to SelectStickers
  const session = await ctx.session
  session.route = Routes.SelectStickers
  logger.debug('changed route to SelectStickers')

  // create tariffs message
  const tariffsString = Object.entries(ctx.config.tariffs)
    .map(([_, { freeDelivery, stickerCost, stickersMax, stickersMin }]) => {
      const freeDeliveryMessage = freeDelivery ? ` —ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞` : ''

      return `*${stickersMin}-${stickersMax}* —Å—Ç—ñ–∫–µ—Ä—ñ–≤: ${stickerCost} –≥—Ä–Ω/—à—Ç${freeDeliveryMessage}\n`
    })
    .join('')

  // create message that informs user they can send stickers
  const message = `–°—É–ø–µ—Ä! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Å—Ç—ñ–∫–µ—Ä–∏ üî•\n\n–ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É, —â–æ —á–∏–º –±—ñ–ª—å—à–µ —Å—Ç—ñ–∫–µ—Ä—ñ–≤ —Ç–∏ –∑–∞–º–æ–≤–∏—à, —Ç–∏–º –Ω–∏–∂—á–∞ –±—É–¥–µ —Ü—ñ–Ω–∞:\n\n${tariffsString}`
  logger = logger.child({ message })

  // send message with info that user can send stickers now
  await ctx.reply(message, { deletePrevBotMessages: true, parse_mode: 'Markdown' })
  logger.debug('sent message that user can send stickers')
}

/** Gets user's referral code and sends it to user along with referral program instructions. */
async function referralProgramButton(ctx: Ctx) {
  let logger = ctx.logger.child({ name: 'main-menu: Referral program', user_id: ctx.from.id })

  // get user's free stickers count and referral code
  const session = await ctx.session
  const freeStickersCount = session.user!.free_stickers_count
  const referralCode = session.user!.referral_code

  const { freeStickerForInvitedUser } = ctx.config.referral

  // create a message with referral link and referral program instructions
  const message = `–¢–≤–æ—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–Ω–∞—Ç–∏—Å–Ω–∏ —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏):\n\`https://t.me/print_stickers_ua_bot?start=${referralCode}\`\n\n–ö–æ–ª–∏ —Ö—Ç–æ—Å—å –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î—Ç—å—Å—è –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —ñ –∑—Ä–æ–±–∏—Ç—å –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –≤–∏ —É–¥–≤–æ—Ö –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ ${freeStickerForInvitedUser} –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Å—Ç—ñ–∫–µ—Ä–∞ üî•\n\n–ó–∞—Ä–∞–∑ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Å—Ç—ñ–∫–µ—Ä—ñ–≤: ${freeStickersCount}`
  logger = logger.child({ message })

  // send message with referral link
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    reply_markup: mainMenu,
    deleteInFuture: true,
    deletePrevBotMessages: true,
  })
  logger.debug('sent message with referral link')
}

/** Gets active user orders and sends their info (status, delivery address, price) to user. */
async function myOrdersButton(ctx: Ctx) {
  let logger = ctx.logger.child({ name: 'main-menu: My orders', user_id: ctx.from.id })

  // get active user orders
  const userID = ctx.from.id
  const [userOrders, err] = await goLike(
    ctx.repos.Orders.GetUserOrders(userID, ['cancelled', 'completed']),
  )
  if (err) {
    logger.error('failed to get active user orders', { err })
    return
  }
  logger = logger.child({ userOrders })
  logger.debug('got user orders')

  // check if user has any orders
  if (userOrders.length === 0) {
    // reply with no orders message
    await ctx.reply(`–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å`, {
      reply_markup: mainMenu,
      deleteInFuture: true,
      deletePrevBotMessages: true,
    })
    logger.debug('user has no orders', { userID })
    return
  }

  const orderStatuses: Record<OrderStatus, string> = {
    payment_pending: '‚è≥ –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏',
    confirmed: `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–ø–ª–∞—á–µ–Ω–æ`,
    layout_ready: `üñ® –í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è`,
    printing: `üñ® –í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è`,
    delivery: `üöö –î–æ—Å—Ç–∞–≤–∫–∞`,
    completed: `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ`,
    cancelled: `‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ`,
  }

  // create a message with user's orders
  const ordersMessage = userOrders
    .map((order, index) => {
      const title = `#${userOrders.length - index} [–°—Ç—ñ–∫–µ—Ä–∏](https://t.me/addstickers/${
        order.telegram_sticker_set_name
      })`
      const status = `_–°—Ç–∞—Ç—É—Å_: ${orderStatuses[order.status]}`
      const deliveryAddress = `_–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–≤–∫–∏_: ${order.delivery_address}`
      const price = `_–¶—ñ–Ω–∞ (–±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏)_: ${order.stickers_cost} –≥—Ä–Ω`

      return `${title}\n${status}\n${deliveryAddress}\n${price}\n\n`
    })
    .join('\n')

  const message = `–¢–≤–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n${ordersMessage}`
  logger = logger.child({ message })

  // send message with user's orders
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    reply_markup: mainMenu,
    deleteInFuture: true,
    deletePrevBotMessages: true,
  })
  logger.debug('sent message with user orders')
}

async function myStickerSetsButton(ctx: Ctx) {
  let logger = ctx.logger.child({ name: 'main-menu: My stickers', user_id: ctx.from.id })

  try {
    // get user orders
    const userID = ctx.from.id
    logger = logger.child({ userID })

    const [userOrders, err] = await goLike(ctx.repos.Orders.GetUserOrders(userID))
    if (err) {
      logger.error(`failed to get user orders: ${err}`)
      return
    }
    logger = logger.child({ userOrders })
    logger.debug('got user orders')

    // check if user has any orders
    if (userOrders.length === 0) {
      await ctx.reply(
        `–ü–æ–∫–∏ —â–æ —É —Ç–µ–±–µ –Ω–µ–º–∞—î –ø–∞–∫—ñ–≤ –Ω–∞–ª—ñ–ø–æ–∫\n–ü—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –Ω–∞–ª—ñ–ø–æ–∫ —è —Å—Ç–≤–æ—Ä—é –ø–∞–∫ —ñ–∑ –Ω–∏—Ö, –Ω–∞ –ø–∞–º º—è—Ç—å üòé`,
        { reply_markup: mainMenu, deleteInFuture: true, deletePrevBotMessages: true },
      )
      logger.debug('user has no sticker sets')
      return
    }

    // create sticker sets message
    const stickerSetsInline = userOrders
      .map((order, index) => {
        return `[–ü–∞–∫ #${userOrders.length - index}](https://t.me/addstickers/${
          order.telegram_sticker_set_name
        })\n`
      })
      .join('\n')

    // send message with user's stickers sets
    await ctx.reply(`–¢–≤–æ—ó –Ω–∞–ª—ñ–ø–∫–∏:\n\n${stickerSetsInline}`, {
      parse_mode: 'Markdown',
      reply_markup: mainMenu,
      deleteInFuture: true,
      deletePrevBotMessages: true,
    })
  } catch (error) {
    logger.error(`failed to get user stickers: ${error}`)
  }
}

// TODO: implement
async function faqButton(ctx: Ctx) {
  const logger = ctx.logger.child({ name: 'main-menu: FAQ', user_id: ctx.from.id })

  logger.debug('TODO: send FAQ')

  await ctx.reply('TODO: send FAQ', {
    reply_markup: mainMenu,
    deleteInFuture: true,
    deletePrevBotMessages: true,
  })
}
