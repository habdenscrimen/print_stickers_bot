import dayjs from 'dayjs'
import utc from 'dayjs/plugin/utc'
import timezone from 'dayjs/plugin/timezone'
import { RouteHandler } from '.'
import { orderStatuses } from '../texts/order_statuses'

dayjs.extend(utc)
dayjs.extend(timezone)

export const cancelOrder: RouteHandler = (nextRoute) => async (ctx) => {
  let logger = ctx.logger.child({ name: 'cancel-order-route', user_id: ctx.from!.id })

  try {
    // check if user entered a valid order number
    if (!ctx.message?.text) {
      logger.debug('message is not text')
      await ctx.editMessageText(`–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1)`)
    }

    // get session
    const session = await ctx.session

    // check if order number is of type number
    const orderNumber = parseInt(ctx.message!.text!, 10)
    if (!Number.isNaN(orderNumber)) {
      logger.debug('order number is a number, show confirmation message')

      // get user orders from session
      const userOrders = session.user?.activeOrders || []
      if (!userOrders.length) {
        logger.debug('user has no orders', { userID: ctx.from!.id })
        await ctx.editMessageText(
          `–£ –í–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å. –û–±–µ—Ä—ñ—Ç—å –Ω–∞–ª—ñ–ø–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üòé`,
        )
        return
      }

      // check that user entered an order number that exists
      if (orderNumber < 1 || orderNumber > userOrders.length) {
        logger.debug('order number is out of range')
        await ctx.editMessageText(
          `–í–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1)`,
        )
        return
      }

      // get order from user orders
      const order = userOrders[userOrders.length - orderNumber]
      logger = logger.child({ order })
      logger.debug('got order to delete')

      // save order to delete to session
      session.orderToDelete = order

      // create message with order info
      const title = `üíÖ [–ù–∞–ª—ñ–ø–∫–∏](https://t.me/addstickers/${order.telegram_sticker_set_name})`
      const deliveryAddress = `üöö _–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–≤–∫–∏_: ${order.delivery_address}`
      const price = `üí∞ _–¶—ñ–Ω–∞ (–±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏)_: ${order.stickers_cost} –≥—Ä–Ω`

      const status = `_–°—Ç–∞—Ç—É—Å_: ${orderStatuses[order.status]}`

      const date = `_–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è_: ${dayjs(order.created_at)
        .tz('Europe/Kiev')
        .format('DD.MM.YYYY, HH:mm')}`

      const stickersCount = `_–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–ª—ñ–ø–æ–∫_: ${order.telegram_sticker_file_ids.length}`

      const orderInfo = `${title}\n${status}\n${date}\n${stickersCount}\n${deliveryAddress}\n${price}\n\n`
      logger = logger.child({ orderInfo })

      // show confirmation message
      const message =
        order.status === 'confirmed'
          ? `–í–∏ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n${orderInfo}–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è, —ñ –º–∏ —Å–∫–∞—Å—É—î–º–æ –π–æ–≥–æ.`
          : `–í–∏ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n${orderInfo}–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è, —ñ –º–∏ —Å—Ç–≤–æ—Ä–∏–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –π–æ–≥–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.`

      await ctx.reply(message, { parse_mode: 'Markdown', deleteInFuture: true })
      return
    }

    // check if there's order to delete in session
    const { orderToDelete } = session
    if (!orderToDelete) {
      logger.debug('no order to delete in session')
      await ctx.editMessageText(`–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1)`)
      return
    }

    // show loader
    await ctx.editMessageText(`‚è≥ –°–µ–∫—É–Ω–¥—É...`, { reply_markup: undefined })

    // handle cancellation request
    await ctx.services.Orders.HandleCancellationRequest(orderToDelete.id!, ctx.message!.text!)
    logger.debug('handled cancellation request')

    // delete order from session
    session.orderToDelete = undefined

    // create success message, depending on order status
    const successMessage =
      orderToDelete.status === 'confirmed'
        ? `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n\n–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üëá`
        : `‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ\n\n–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üëá`

    // show success message
    await ctx.reply(successMessage, {
      deleteInFuture: true,
      deletePrevBotMessages: true,
      reply_markup: ctx.menus.Main.Main,
    })
  } catch (error) {
    logger.error(`failed to cancel user order: ${error}`)
    await ctx.reply(`‚ùå –ù–∞ –∂–∞–ª—å, –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.`)
  }
}
