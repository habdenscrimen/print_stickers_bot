import { Menu } from '@grammyjs/menu'
import { Ctx } from '.'
import { BotContext } from '..'
import { goLike } from '../../../../pkg/function_exec'
import { Routes } from '../routes'
import { mainMenu } from './main'

export const confirmStickerSet = new Menu<BotContext>('confirm-sticker-set')
  .dynamic(async (ctx, range) => {
    // get session
    const session = await ctx.session

    range.url(`–ú–æ—ó —Å—Ç—ñ–∫–µ—Ä–∏`, `https://t.me/addstickers/${session.stickerSetName}`).row()
  })
  .text(`–í—Å–µ —Å—É–ø–µ—Ä, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é`, confirmStickers)
  .row()
  .text(`–Ø –ø–æ–º–∏–ª–∏–≤—Å—è, –¥–∞–≤–∞–π —Å–ø–æ—á–∞—Ç–∫—É`, cancelStickers)
  .row()

async function confirmStickers(ctx: Ctx) {
  let logger = ctx.logger.child({
    name: 'confirm-sticker-set-menu: Confirm',
    user_id: ctx.from.id,
  })

  // get session
  const session = await ctx.session

  // set route to delivery
  session.route = Routes.Delivery
  logger.debug('set route to delivery')

  // save sticker set to user in database
  const [_, updateUserErr] = await goLike(
    ctx.repos.Users.UpdateUser(
      ctx.from.id,
      {},
      { newTelegramStickerSet: session.stickerSetName! },
    ),
  )
  if (updateUserErr) {
    logger.error(`failed to update user: ${updateUserErr}`)
    return
  }
  logger.debug('saved sticker set to user in database')

  // get stickers count
  const stickersCount = Object.keys(session.stickers!).length
  // calculate order price
  const [orderPrice, getPriceErr] = await ctx.services.Orders.CalculateOrderPrice(
    ctx,
    stickersCount,
  )
  if (!orderPrice || getPriceErr) {
    logger.error(`failed to calculate order price`)
    return
  }
  logger = logger.child({ orderPrice })
  logger.debug('calculated order price')

  const { deliveryPrice, stickersPrice, totalPrice } = orderPrice

  // delivery price text
  const deliveryPriceText =
    deliveryPrice === 0 ? `–¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞` : `–¥–æ—Å—Ç–∞–≤–∫–∞ ‚Äî ${deliveryPrice} –≥—Ä–Ω`

  // delivery info text
  const askDeliveryInfo = `–ù–∞–ø–∏—à–∏ –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å—Ç—ñ–∫–µ—Ä—ñ–≤ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é (—ñ–º º—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –º—ñ—Å—Ç–æ —ñ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è/–ø–æ—à—Ç–æ–º–∞—Ç—É) üì§`

  // message text
  const message = `–î—è–∫—É—é, —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî ${stickersPrice} –≥—Ä–Ω, ${deliveryPriceText}, –≤—Å—å–æ–≥–æ ‚Äî ${totalPrice} –≥—Ä–Ω.\n–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–∞ –ù–æ–≤—ñ–π –ü–æ—à—Ç—ñ.\n\n${askDeliveryInfo}`

  // ask user to enter delivery address
  await ctx.reply(message, { deleteInFuture: true, deletePrevBotMessages: true })
}

async function cancelStickers(ctx: Ctx) {
  const logger = ctx.logger.child({
    name: 'confirm-sticker-set-menu: Cancel',
    user_id: ctx.from.id,
  })

  // get session
  const session = await ctx.session

  // set route to welcome
  session.route = Routes.Welcome
  logger.debug('set route to welcome')

  // delete sticker set
  const deleteSetErr = await ctx.services.Telegram.DeleteStickerSet(
    ctx,
    session.stickerSetName!,
  )
  if (deleteSetErr) {
    logger.error(`failed to delete sticker set: ${deleteSetErr}`)
    return
  }
  logger.debug('sticker set successfully deleted')

  // clear stickers from session
  session.stickers = {}
  session.stickerSetName = ''
  logger.debug('cleared stickers from session')

  // go back to main menu
  const [_, sendMessageErr] = await goLike(
    ctx.reply(`–í—ñ–¥–º—ñ–Ω–∏–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üëå`, {
      reply_markup: mainMenu,
      deleteInFuture: true,
      deletePrevBotMessages: true,
    }),
  )
  if (sendMessageErr) {
    logger.error(`failed to send message: ${sendMessageErr}`)
  }
}
