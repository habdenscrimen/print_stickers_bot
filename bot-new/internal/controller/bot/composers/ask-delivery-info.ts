import { Menu } from '@grammyjs/menu'
import { Composer } from 'grammy'
import { BotContext } from '../context'
import { SessionSteps } from '../session'
import { mainMenu, mainMenuText } from './menus/main-menu'

export const askDeliveryInfoMessages = {
  entering: `
üöö –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å—Ç—ñ–∫–µ—Ä—ñ–≤ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é\\:

üëâ –Ü–º º—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
üëâ –ú—ñ—Å—Ç–æ —ñ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è\\/–ø–æ—à—Ç–æ–º–∞—Ç—É

*–ù–∞–ø—Ä–∏–∫–ª–∞–¥\\:*
–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º º—è –ü–æ\\-–±–∞—Ç—å–∫–æ–≤—ñ, –º\\. –ú—ñ—Å—Ç–æ, –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è 12\\.

_–ù–µ —Ö–≤–∏–ª—é–π—Ç–µ—Å—è —â–æ–¥–æ —Ñ–æ—Ä–º–∞—Ç—É, –ø–∏—à—ñ—Ç—å —è–∫ –∑—Ä—É—á–Ω–æ üòé_
`,
  noDeliveryInfoReceived: `
üöö –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å—Ç—ñ–∫–µ—Ä—ñ–≤ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é\\:

üëâ –Ü–º º—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
üëâ –ú—ñ—Å—Ç–æ —ñ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è\\/–ø–æ—à—Ç–æ–º–∞—Ç—É

*–ù–∞–ø—Ä–∏–∫–ª–∞–¥\\:*
–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º º—è –ü–æ\\-–±–∞—Ç—å–∫–æ–≤—ñ, –º\\. –ú—ñ—Å—Ç–æ, –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è 12\\.

_–ù–µ —Ö–≤–∏–ª—é–π—Ç–µ—Å—è —â–æ–¥–æ —Ñ–æ—Ä–º–∞—Ç—É, –ø–∏—à—ñ—Ç—å —è–∫ –∑—Ä—É—á–Ω–æ üòé_
`,
  orderCreated: `
‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ —ñ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –∫—ñ–Ω—Ü—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–±–æ—á–æ–≥–æ —Ç–∏–∂–Ω—è\\.

–ê –∑–∞—Ä–∞–∑ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üëá
`,
  askToConfirmOrder: (options: { price: number; stickersCount: number }) => {
    const commission = Math.round(20 + (options.price / 100) * 2)

    return `
  üöö –û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–∞ –ù–æ–≤—ñ–π –ü–æ—à—Ç—ñ\\.

  üëâ –í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: *${options.price} –≥—Ä–Ω*\\.
  ${
    options.stickersCount < 25
      ? `üëâ –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: *45 –≥—Ä–Ω*\\. \\(*50 –≥—Ä–Ω*\\. –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤—Ü—ñ —É –ø–æ—à—Ç–æ–º–∞—Ç\\) \\+ *${commission} –≥—Ä–Ω* \\(–∫–æ–º—ñ—Å—ñ—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏\\)\\.`
      : `üëâ –î–æ—Å—Ç–∞–≤–∫–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞\\.`
  }
`
  },
}

const confirmOrderMenu = new Menu<BotContext>('confirm-order-menu')
  .text(`‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è`, async (ctx) => {
    // create order
    await ctx.services.Order.CreateOrder({ ctx })

    // set step to MainMenu
    const session = await ctx.session
    session.step = SessionSteps.MainMenu

    // track analytics event
    ctx.analytics.trackEvent(`(tap) Confirm order menu: Confirm order`, ctx.from.id)

    // track funnel event
    ctx.analytics.trackEvent('Funnel: Order created', ctx.from!.id)

    await ctx.reply(askDeliveryInfoMessages.orderCreated, { reply_markup: mainMenu })
  })
  .row()
  .text(`‚¨ÖÔ∏è –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é`, async (ctx) => {
    // set step to MainMenu
    const session = await ctx.session
    session.step = SessionSteps.MainMenu

    // track analytics event
    ctx.analytics.trackEvent(`(tap) Confirm order menu: Cancel order`, ctx.from.id)

    // reply and delete order in parallel
    await Promise.all([
      ctx.reply(mainMenuText, { reply_markup: mainMenu }),
      ctx.services.Order.DeleteOrder({ ctx }),
    ])
  })
  .row()

// create composer
export const askDeliveryInfoComposer = new Composer<BotContext>()

askDeliveryInfoComposer.use(confirmOrderMenu)

// checkUpdate checks if this composer should handle incoming update
const checkUpdate = async (ctx: BotContext): Promise<boolean> => {
  const session = await ctx.session

  return session.step === SessionSteps.AskDeliveryInfo
}

// composer body
askDeliveryInfoComposer.use(async (ctx, next) => {
  const handleUpdate = await checkUpdate(ctx)

  if (!handleUpdate) {
    await next()
    return
  }

  let logger = ctx.logger.child({ name: 'ask-delivery-info-composer' })

  try {
    // check if text was sent
    if (!ctx.message?.text) {
      await ctx.reply(askDeliveryInfoMessages.noDeliveryInfoReceived)
      logger.debug(`no delivery info received`)

      // track analytics event
      ctx.analytics.trackEvent(`Ask delivery info scene: no text received`, ctx.from!.id, {
        ...(ctx.message || {}),
      })
      return
    }

    // save delivery info
    await ctx.services.Order.SaveDeliveryInfo({ ctx })

    // set step to ConfirmOrder
    const session = await ctx.session
    session.step = SessionSteps.ConfirmOrder

    // track funnel event
    ctx.analytics.trackEvent('Funnel: Confirm order', ctx.from!.id)

    // reply with menu
    const orderInfo = await ctx.services.Order.GetOrderInfo({ ctx })
    const message = askDeliveryInfoMessages.askToConfirmOrder({
      price: orderInfo.price,
      stickersCount: orderInfo.stickersCount,
    })

    await ctx.reply(message, { reply_markup: confirmOrderMenu })
  } catch (error) {
    console.log(error)

    logger = logger.child({ error })
    logger.error(`failed to handle ask-phone-number composer: ${error}`)
  }
})
