import { AdminNotificationPayloads, NotificationPayload, UserNotificationPayloads } from '.'
import { formatDate } from '../../pkg/date'
import { Logger } from '../logger'
import { Repos } from '../repos'

export const createNotificationMessage = async (
  payload: NotificationPayload,
  repos: Repos,
  logger: Logger,
): Promise<string> => {
  let log = logger.child({ name: 'createNotificationMessage', payload })

  try {
    if (!payload.admin && !payload.user) {
      throw new Error('either admin or user must be defined')
    }

    if (payload.admin) {
      if (payload.admin.event === 'new_order') {
        const { orderID } = payload.admin.payload as AdminNotificationPayloads['new_order']
        const order = await repos.Orders.GetOrder(orderID)
        if (!order) {
          throw new Error(`order not found: ${orderID}`)
        }
        log = log.child({ order })

        return `‚ûï –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, ‚Ç¥${order.stickers_cost}, ID: ${orderID}.`
      }

      if (payload.admin.event === 'order_cancelled') {
        const { orderID } = payload.admin
          .payload as AdminNotificationPayloads['order_cancelled']

        return `‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ, ID: ${orderID}.`
      }

      if (payload.admin.event === 'order_cancellation_requested') {
        const { orderID } = payload.admin
          .payload as AdminNotificationPayloads['order_cancellation_requested']

        return `‚è≥‚ùå –°—Ç–≤–æ—Ä–µ–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, ID: ${orderID}.`
      }

      if (payload.admin.event === 'order_cannot_be_refunded') {
        const { orderID } = payload.admin
          .payload as AdminNotificationPayloads['order_cancellation_requested']

        return `‚ö†Ô∏è –ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è ‚Äî –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–º—ñ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID ${orderID}!`
      }

      if (payload.admin.event === 'new_question') {
        const { questionID } = payload.admin
          .payload as AdminNotificationPayloads['new_question']

        return `‚ûï –ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è, ID: ${questionID}.`
      }
    }

    if (payload.user) {
      if (payload.user.event === 'order_refunded') {
        const { orderID } = payload.user.payload as UserNotificationPayloads['order_refunded']

        // get order by id
        const order = await repos.Orders.GetOrder(orderID)
        if (!order) {
          throw new Error(`order not found: ${orderID}`)
        }
        log = log.child({ order })

        const cancellationEventDate = order.events.cancelled

        return `‚úÖ –ö–æ—à—Ç–∏ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–µ ${formatDate(cancellationEventDate)} (${
          order.stickers_cost
        } –≥—Ä–Ω.) –ø–æ–≤–µ—Ä–Ω–µ–Ω—ñ.`
      }

      if (payload.user.event === 'admin_cancelled_order') {
        const { orderID } = payload.user
          .payload as UserNotificationPayloads['admin_cancelled_order']

        // get order by id
        const order = await repos.Orders.GetOrder(orderID)
        if (!order) {
          throw new Error(`order not found: ${orderID}`)
        }
        log = log.child({ order })

        const cancellationRequestedEventDate = order.events.cancellation_pending

        return `‚úÖ ${formatDate(
          cancellationRequestedEventDate,
        )} –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—É–º—É ${
          order.stickers_cost
        } –≥—Ä–Ω.\n–ú–∏ –π–æ–≥–æ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å—É–≤–∞–ª–∏, –±–∞–Ω–∫ –ø–æ–≤–µ—Ä–Ω–µ –∫–æ—à—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º –º—ñ—Å—è—Ü—è (–∑–∞–∑–≤–∏—á–∞–π —Ü–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —à–≤–∏–¥—à–µ).`
      }

      if (payload.user.event === 'order_by_your_referral_code') {
        const { orderID } = payload.user
          .payload as UserNotificationPayloads['order_by_your_referral_code']

        // get order by id
        const order = await repos.Orders.GetOrder(orderID)
        if (!order) {
          throw new Error(`order not found: ${orderID}`)
        }
        log = log.child({ order })

        // get order's owner
        const orderOwner = await repos.Users.GetUserByID(order.user_id)
        if (!orderOwner) {
          throw new Error(`user not found: ${order.user_id}`)
        }
        log = log.child({ order_owner: orderOwner })

        // create user name
        const userName = `${orderOwner.first_name}${
          orderOwner.last_name ? ` ${orderOwner.last_name}` : ''
        }`
        log = log.child({ user_name: userName })

        return `üéâ ${userName} –∑—Ä–æ–±–∏–≤(–ª–∞) –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ —Ç–≤–æ—ó–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –ø–æ–≤–∏–ª–∞–Ω–Ω—è–º! –í–∏ —É–¥–≤–æ—Ö –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ 3 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –Ω–∞–ª—ñ–ø–∫–∏!`
      }

      if (payload.user.event === 'question_answered') {
        const { questionID } = payload.user
          .payload as UserNotificationPayloads['question_answered']

        // get question by ID
        const question = await repos.Questions.GetQuestion({ questionID })
        if (!question) {
          throw new Error(`question not found`)
        }
        if (!question.answer || !question.answered_at) {
          throw new Error(`question is not answered`)
        }

        return `üëå –ù–µ—â–æ–¥–∞–≤–Ω–æ –í–∏ —Å—Ç–∞–≤–∏–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: "${question.question}"\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ:\n\n${question.answer}\n\n‚ÑπÔ∏è –Ø–∫—â–æ —É –í–∞—Å —â–µ –∑–∞–ª–∏—à–∏–ª–∏—Å—å –ø–∏—Ç–∞–Ω–Ω—è, –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —ó—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.`
      }
    }

    throw new Error('unknown notification event')
  } catch (error) {
    log.error(`failed to create notification message: ${error}`)
    throw new Error(`failed to create notification message: ${error}`)
  }
}
