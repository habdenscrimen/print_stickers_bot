import { Menu } from '@grammyjs/menu'
import { CustomContext } from '../../context'
import { Order, OrderStatus } from '../../domain'
import { Routes } from '../../routes'
import { withDeleteMessage } from '../../hof'

const orderStatuses: Record<OrderStatus, string> = {
  confirmed: `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ`,
  layout_ready: `üñ® –í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è`,
  printing: `üñ® –í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è`,
  delivery: `üöö –î–æ—Å—Ç–∞–≤–∫–∞`,
  completed: `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ`,
  cancelled: `‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ`,
}

const createShowOrdersMessage = (orders: Order[]): string => {
  const title = `–¢–≤–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n`

  const orderMessages = orders.map((order, index) => {
    const title = `#${orders.length - index} [–°—Ç—ñ–∫–µ—Ä–∏](https://t.me/addstickers/${
      order.telegram_sticker_set_name
    })`
    const status = `_–°—Ç–∞—Ç—É—Å_: ${orderStatuses[order.status]}`
    const deliveryAddress = `_–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–≤–∫–∏_: ${order.delivery_address}`
    const price = `_–¶—ñ–Ω–∞ (–±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏)_: ${order.stickers_cost} –≥—Ä–Ω`

    return `${title}\n${status}\n${deliveryAddress}\n${price}\n\n`
  })

  return `${title}\n${orderMessages.join('\n')}`
}

export const mainMenu = new Menu<CustomContext>('main_menu')
  .text('–û–±—Ä–∞—Ç–∏ —Å—Ç—ñ–∫–µ—Ä–∏', async (ctx) => {
    const session = await ctx.session
    session.route = Routes.SelectStickers

    await withDeleteMessage(
      ctx,
      (ctx) => ctx.reply(`–°—É–ø–µ—Ä! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Å—Ç—ñ–∫–µ—Ä–∏`),
      false,
    )
  })
  .row()
  .text('–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', async (ctx) => {
    const logger = ctx.logger.child({ name: 'mainMenu - My Orders' })

    try {
      // get user orders
      const userID = ctx.from.id
      const userOrders = await ctx.database.GetActiveUserOrders(userID)
      logger.debug('got user orders', { userOrders })

      // check if user has any orders
      if (userOrders.length === 0) {
        // delete previous bot's message and reply with no orders message
        await withDeleteMessage(ctx, (ctx) =>
          ctx.reply('–ü–æ–∫–∏ —É —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å', { reply_markup: mainMenu }),
        )
        logger.debug('user has no orders', { userID })
        return
      }

      // create message
      const message = createShowOrdersMessage(userOrders)
      logger.debug('sending user orders message', { message })

      // send message
      await ctx.reply(message, { parse_mode: 'Markdown' })

      // delete previous bot's message and show main menu
      await withDeleteMessage(ctx, (ctx) =>
        ctx.reply('–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é', { reply_markup: mainMenu }),
      )
    } catch (error) {
      logger.error('failed to send user orders info', { error })
    }
  })
  .text('FAQ', async (ctx) => {
    await ctx.reply('–¢–∏ –Ω–∞–∂–∞–≤ –Ω–∞ FAQ')
  })
