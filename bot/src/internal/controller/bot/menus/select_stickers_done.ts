import { Menu } from '@grammyjs/menu'
import { Ctx } from '.'
import { BotContext } from '..'
import { goLike } from '../../../../pkg/function_exec'
import { confirmSelectStickersDoneMenu } from './confirm_select_stickers_done'

export const selectStickersDoneMenu = new Menu<BotContext>('select-stickers-done').text(
  `–¶–µ –≤—Å–µ`,
  finishSelectingStickers,
)

async function finishSelectingStickers(ctx: Ctx) {
  let logger = ctx.logger.child({
    name: 'select-stickers-done-menu: Finish',
    user_id: ctx.from.id,
  })

  // get session
  const session = await ctx.session
  logger = logger.child({ session })

  const stickersCount = Object.keys(session.stickers!).length
  const [orderPrice, err] = await ctx.services.Orders.CalculateOrderPrice(ctx, stickersCount)
  if (err || !orderPrice) {
    logger.error('error while calculating order price', err)
    return
  }
  logger = logger.child({ stickersCount, orderPrice })
  logger.debug('calculated order price')

  // create message that motivates user to select more stickers
  let additionalText = ''

  const priceLevel = orderPrice.orderPriceLevel
  const { tariffs } = ctx.config
  const price = tariffs[priceLevel]

  if (priceLevel === 'level_1') {
    additionalText = `\n–ó–∞–º–æ–≤ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ —Å—Ç—ñ–∫–µ—Ä—ñ–≤ —ñ —Ü—ñ–Ω–∞ –∑–∞ —Å—Ç—ñ–∫–µ—Ä –∑–º–µ–Ω—à–∏—Ç—å—Å—è:\n\n*${tariffs.level_2.stickersMin}-${tariffs.level_2.stickersMax}* —Å—Ç—ñ–∫–µ—Ä—ñ–≤: ${tariffs.level_2.stickerCost} –≥—Ä–Ω/—à—Ç\n–≤—ñ–¥ *${tariffs.level_3.stickersMin}* —Å—Ç—ñ–∫–µ—Ä—ñ–≤: ${tariffs.level_3.stickerCost} –≥—Ä–Ω/—à—Ç\n–≤—ñ–¥ *${tariffs.level_4.stickersMin}* —Å—Ç—ñ–∫–µ—Ä—ñ–≤: ${tariffs.level_4.stickerCost} –≥—Ä–Ω/—à—Ç —ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞`
  } else if (priceLevel === 'level_2') {
    additionalText = `\n–ó–∞–º–æ–≤ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ —Å—Ç—ñ–∫–µ—Ä—ñ–≤ —ñ —Ü—ñ–Ω–∞ –∑–∞ —Å—Ç—ñ–∫–µ—Ä –∑–º–µ–Ω—à–∏—Ç—å—Å—è:\n\n–≤—ñ–¥ *${tariffs.level_3.stickersMin}* —Å—Ç—ñ–∫–µ—Ä—ñ–≤: ${tariffs.level_3.stickerCost} –≥—Ä–Ω/—à—Ç\n–≤—ñ–¥ *${tariffs.level_4.stickersMin}* —Å—Ç—ñ–∫–µ—Ä—ñ–≤: ${tariffs.level_4.stickerCost} –≥—Ä–Ω/—à—Ç —ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞`
  } else if (priceLevel === 'level_3') {
    additionalText = `\n–ó–∞–º–æ–≤ —â–µ ${
      tariffs.level_4.stickersMin - stickersCount
    } —Å—Ç—ñ–∫–µ—Ä—ñ–≤ —ñ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–∏–π–¥–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—é`
  } else if (priceLevel === 'level_4') {
    additionalText = `–¢–∞–∫–æ–∂ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—é`
  }

  const message = `–û–±—Ä–∞–Ω–æ *${stickersCount}* —Å—Ç—ñ–∫–µ—Ä—ñ–≤ –∑–∞ —Ü—ñ–Ω–æ—é ${price.stickerCost} –≥—Ä–Ω/—à—Ç (—Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è *${orderPrice.stickersPrice}* –≥—Ä–Ω. –ø—Ä–∏ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞–≤–∫–∏ *${orderPrice.deliveryPrice}* –≥—Ä–Ω.)\n${additionalText}\n\n–©–æ–± –¥–æ–¥–∞—Ç–∏ —Å—Ç—ñ–∫–µ—Ä–∏, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–≤–∂—É–π —ó—Ö –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ üöÄ`
  logger = logger.child({ message })

  const [_, sendMessageErr] = await goLike(
    ctx.reply(message, {
      reply_markup: confirmSelectStickersDoneMenu,
      parse_mode: 'Markdown',
      deleteInFuture: true,
      deletePrevBotMessages: true,
    }),
  )
  if (sendMessageErr) {
    logger.error(`error while sending message: ${sendMessageErr}`)
    return
  }
  logger.debug('sent message that motivates user to select more stickers')
}
